# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_toolkit', [dirname(__file__)])
        except ImportError:
            import _toolkit
            return _toolkit
        if fp is not None:
            try:
                _mod = imp.load_module('_toolkit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _toolkit = swig_import_helper()
    del swig_import_helper
else:
    import _toolkit
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _toolkit.new_intArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _toolkit.delete_intArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _toolkit.intArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _toolkit.intArray___setitem__(self, index, value)

    def cast(self):
        return _toolkit.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _toolkit.intArray_frompointer
    if _newclass:
        frompointer = staticmethod(_toolkit.intArray_frompointer)
intArray_swigregister = _toolkit.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(t):
    return _toolkit.intArray_frompointer(t)
intArray_frompointer = _toolkit.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr

    def __init__(self, nelements):
        this = _toolkit.new_doubleArray(nelements)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _toolkit.delete_doubleArray
    __del__ = lambda self: None

    def __getitem__(self, index):
        return _toolkit.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        return _toolkit.doubleArray___setitem__(self, index, value)

    def cast(self):
        return _toolkit.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _toolkit.doubleArray_frompointer
    if _newclass:
        frompointer = staticmethod(_toolkit.doubleArray_frompointer)
doubleArray_swigregister = _toolkit.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    return _toolkit.doubleArray_frompointer(t)
doubleArray_frompointer = _toolkit.doubleArray_frompointer

class Project(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Project, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Project, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _toolkit.delete_Project
    __del__ = lambda self: None
Project_swigregister = _toolkit.Project_swigregister
Project_swigregister(Project)


_toolkit.MAXID_swigconstant(_toolkit)
MAXID = _toolkit.MAXID

_toolkit.MAXMSG_swigconstant(_toolkit)
MAXMSG = _toolkit.MAXMSG

_toolkit.ELEVATION_swigconstant(_toolkit)
ELEVATION = _toolkit.ELEVATION

_toolkit.BASEDEMAND_swigconstant(_toolkit)
BASEDEMAND = _toolkit.BASEDEMAND

_toolkit.PATTERN_swigconstant(_toolkit)
PATTERN = _toolkit.PATTERN

_toolkit.EMITTER_swigconstant(_toolkit)
EMITTER = _toolkit.EMITTER

_toolkit.INITQUAL_swigconstant(_toolkit)
INITQUAL = _toolkit.INITQUAL

_toolkit.SOURCEQUAL_swigconstant(_toolkit)
SOURCEQUAL = _toolkit.SOURCEQUAL

_toolkit.SOURCEPAT_swigconstant(_toolkit)
SOURCEPAT = _toolkit.SOURCEPAT

_toolkit.SOURCETYPE_swigconstant(_toolkit)
SOURCETYPE = _toolkit.SOURCETYPE

_toolkit.TANKLEVEL_swigconstant(_toolkit)
TANKLEVEL = _toolkit.TANKLEVEL

_toolkit.DEMAND_swigconstant(_toolkit)
DEMAND = _toolkit.DEMAND

_toolkit.HEAD_swigconstant(_toolkit)
HEAD = _toolkit.HEAD

_toolkit.PRESSURE_swigconstant(_toolkit)
PRESSURE = _toolkit.PRESSURE

_toolkit.QUALITY_swigconstant(_toolkit)
QUALITY = _toolkit.QUALITY

_toolkit.SOURCEMASS_swigconstant(_toolkit)
SOURCEMASS = _toolkit.SOURCEMASS

_toolkit.INITVOLUME_swigconstant(_toolkit)
INITVOLUME = _toolkit.INITVOLUME

_toolkit.MIXMODEL_swigconstant(_toolkit)
MIXMODEL = _toolkit.MIXMODEL

_toolkit.MIXZONEVOL_swigconstant(_toolkit)
MIXZONEVOL = _toolkit.MIXZONEVOL

_toolkit.TANKDIAM_swigconstant(_toolkit)
TANKDIAM = _toolkit.TANKDIAM

_toolkit.MINVOLUME_swigconstant(_toolkit)
MINVOLUME = _toolkit.MINVOLUME

_toolkit.VOLCURVE_swigconstant(_toolkit)
VOLCURVE = _toolkit.VOLCURVE

_toolkit.MINLEVEL_swigconstant(_toolkit)
MINLEVEL = _toolkit.MINLEVEL

_toolkit.MAXLEVEL_swigconstant(_toolkit)
MAXLEVEL = _toolkit.MAXLEVEL

_toolkit.MIXFRACTION_swigconstant(_toolkit)
MIXFRACTION = _toolkit.MIXFRACTION

_toolkit.TANK_KBULK_swigconstant(_toolkit)
TANK_KBULK = _toolkit.TANK_KBULK

_toolkit.TANKVOLUME_swigconstant(_toolkit)
TANKVOLUME = _toolkit.TANKVOLUME

_toolkit.MAXVOLUME_swigconstant(_toolkit)
MAXVOLUME = _toolkit.MAXVOLUME

_toolkit.CANOVERFLOW_swigconstant(_toolkit)
CANOVERFLOW = _toolkit.CANOVERFLOW

_toolkit.DEMANDDEFICIT_swigconstant(_toolkit)
DEMANDDEFICIT = _toolkit.DEMANDDEFICIT

_toolkit.DIAMETER_swigconstant(_toolkit)
DIAMETER = _toolkit.DIAMETER

_toolkit.LENGTH_swigconstant(_toolkit)
LENGTH = _toolkit.LENGTH

_toolkit.ROUGHNESS_swigconstant(_toolkit)
ROUGHNESS = _toolkit.ROUGHNESS

_toolkit.MINORLOSS_swigconstant(_toolkit)
MINORLOSS = _toolkit.MINORLOSS

_toolkit.INITSTATUS_swigconstant(_toolkit)
INITSTATUS = _toolkit.INITSTATUS

_toolkit.INITSETTING_swigconstant(_toolkit)
INITSETTING = _toolkit.INITSETTING

_toolkit.KBULK_swigconstant(_toolkit)
KBULK = _toolkit.KBULK

_toolkit.KWALL_swigconstant(_toolkit)
KWALL = _toolkit.KWALL

_toolkit.FLOW_swigconstant(_toolkit)
FLOW = _toolkit.FLOW

_toolkit.VELOCITY_swigconstant(_toolkit)
VELOCITY = _toolkit.VELOCITY

_toolkit.HEADLOSS_swigconstant(_toolkit)
HEADLOSS = _toolkit.HEADLOSS

_toolkit.STATUS_swigconstant(_toolkit)
STATUS = _toolkit.STATUS

_toolkit.SETTING_swigconstant(_toolkit)
SETTING = _toolkit.SETTING

_toolkit.ENERGY_swigconstant(_toolkit)
ENERGY = _toolkit.ENERGY

_toolkit.LINKQUAL_swigconstant(_toolkit)
LINKQUAL = _toolkit.LINKQUAL

_toolkit.LINKPATTERN_swigconstant(_toolkit)
LINKPATTERN = _toolkit.LINKPATTERN

_toolkit.PUMP_STATE_swigconstant(_toolkit)
PUMP_STATE = _toolkit.PUMP_STATE

_toolkit.PUMP_EFFIC_swigconstant(_toolkit)
PUMP_EFFIC = _toolkit.PUMP_EFFIC

_toolkit.PUMP_POWER_swigconstant(_toolkit)
PUMP_POWER = _toolkit.PUMP_POWER

_toolkit.PUMP_HCURVE_swigconstant(_toolkit)
PUMP_HCURVE = _toolkit.PUMP_HCURVE

_toolkit.PUMP_ECURVE_swigconstant(_toolkit)
PUMP_ECURVE = _toolkit.PUMP_ECURVE

_toolkit.PUMP_ECOST_swigconstant(_toolkit)
PUMP_ECOST = _toolkit.PUMP_ECOST

_toolkit.PUMP_EPAT_swigconstant(_toolkit)
PUMP_EPAT = _toolkit.PUMP_EPAT

_toolkit.DURATION_swigconstant(_toolkit)
DURATION = _toolkit.DURATION

_toolkit.HYDSTEP_swigconstant(_toolkit)
HYDSTEP = _toolkit.HYDSTEP

_toolkit.QUALSTEP_swigconstant(_toolkit)
QUALSTEP = _toolkit.QUALSTEP

_toolkit.PATTERNSTEP_swigconstant(_toolkit)
PATTERNSTEP = _toolkit.PATTERNSTEP

_toolkit.PATTERNSTART_swigconstant(_toolkit)
PATTERNSTART = _toolkit.PATTERNSTART

_toolkit.REPORTSTEP_swigconstant(_toolkit)
REPORTSTEP = _toolkit.REPORTSTEP

_toolkit.REPORTSTART_swigconstant(_toolkit)
REPORTSTART = _toolkit.REPORTSTART

_toolkit.RULESTEP_swigconstant(_toolkit)
RULESTEP = _toolkit.RULESTEP

_toolkit.STATISTIC_swigconstant(_toolkit)
STATISTIC = _toolkit.STATISTIC

_toolkit.PERIODS_swigconstant(_toolkit)
PERIODS = _toolkit.PERIODS

_toolkit.STARTTIME_swigconstant(_toolkit)
STARTTIME = _toolkit.STARTTIME

_toolkit.HTIME_swigconstant(_toolkit)
HTIME = _toolkit.HTIME

_toolkit.QTIME_swigconstant(_toolkit)
QTIME = _toolkit.QTIME

_toolkit.HALTFLAG_swigconstant(_toolkit)
HALTFLAG = _toolkit.HALTFLAG

_toolkit.NEXTEVENT_swigconstant(_toolkit)
NEXTEVENT = _toolkit.NEXTEVENT

_toolkit.NEXTEVENTTANK_swigconstant(_toolkit)
NEXTEVENTTANK = _toolkit.NEXTEVENTTANK

_toolkit.ITERATIONS_swigconstant(_toolkit)
ITERATIONS = _toolkit.ITERATIONS

_toolkit.RELATIVEERROR_swigconstant(_toolkit)
RELATIVEERROR = _toolkit.RELATIVEERROR

_toolkit.MAXHEADERROR_swigconstant(_toolkit)
MAXHEADERROR = _toolkit.MAXHEADERROR

_toolkit.MAXFLOWCHANGE_swigconstant(_toolkit)
MAXFLOWCHANGE = _toolkit.MAXFLOWCHANGE

_toolkit.MASSBALANCE_swigconstant(_toolkit)
MASSBALANCE = _toolkit.MASSBALANCE

_toolkit.DEFICIENTNODES_swigconstant(_toolkit)
DEFICIENTNODES = _toolkit.DEFICIENTNODES

_toolkit.DEMANDREDUCTION_swigconstant(_toolkit)
DEMANDREDUCTION = _toolkit.DEMANDREDUCTION

_toolkit.NODE_swigconstant(_toolkit)
NODE = _toolkit.NODE

_toolkit.LINK_swigconstant(_toolkit)
LINK = _toolkit.LINK

_toolkit.TIMEPAT_swigconstant(_toolkit)
TIMEPAT = _toolkit.TIMEPAT

_toolkit.CURVE_swigconstant(_toolkit)
CURVE = _toolkit.CURVE

_toolkit.CONTROL_swigconstant(_toolkit)
CONTROL = _toolkit.CONTROL

_toolkit.RULE_swigconstant(_toolkit)
RULE = _toolkit.RULE

_toolkit.NODECOUNT_swigconstant(_toolkit)
NODECOUNT = _toolkit.NODECOUNT

_toolkit.TANKCOUNT_swigconstant(_toolkit)
TANKCOUNT = _toolkit.TANKCOUNT

_toolkit.LINKCOUNT_swigconstant(_toolkit)
LINKCOUNT = _toolkit.LINKCOUNT

_toolkit.PATCOUNT_swigconstant(_toolkit)
PATCOUNT = _toolkit.PATCOUNT

_toolkit.CURVECOUNT_swigconstant(_toolkit)
CURVECOUNT = _toolkit.CURVECOUNT

_toolkit.CONTROLCOUNT_swigconstant(_toolkit)
CONTROLCOUNT = _toolkit.CONTROLCOUNT

_toolkit.RULECOUNT_swigconstant(_toolkit)
RULECOUNT = _toolkit.RULECOUNT

_toolkit.JUNCTION_swigconstant(_toolkit)
JUNCTION = _toolkit.JUNCTION

_toolkit.RESERVOIR_swigconstant(_toolkit)
RESERVOIR = _toolkit.RESERVOIR

_toolkit.TANK_swigconstant(_toolkit)
TANK = _toolkit.TANK

_toolkit.CVPIPE_swigconstant(_toolkit)
CVPIPE = _toolkit.CVPIPE

_toolkit.PIPE_swigconstant(_toolkit)
PIPE = _toolkit.PIPE

_toolkit.PUMP_swigconstant(_toolkit)
PUMP = _toolkit.PUMP

_toolkit.PRV_swigconstant(_toolkit)
PRV = _toolkit.PRV

_toolkit.PSV_swigconstant(_toolkit)
PSV = _toolkit.PSV

_toolkit.PBV_swigconstant(_toolkit)
PBV = _toolkit.PBV

_toolkit.FCV_swigconstant(_toolkit)
FCV = _toolkit.FCV

_toolkit.TCV_swigconstant(_toolkit)
TCV = _toolkit.TCV

_toolkit.GPV_swigconstant(_toolkit)
GPV = _toolkit.GPV

_toolkit.CLOSED_swigconstant(_toolkit)
CLOSED = _toolkit.CLOSED

_toolkit.OPEN_swigconstant(_toolkit)
OPEN = _toolkit.OPEN

_toolkit.PUMP_XHEAD_swigconstant(_toolkit)
PUMP_XHEAD = _toolkit.PUMP_XHEAD

_toolkit.PUMP_CLOSED_swigconstant(_toolkit)
PUMP_CLOSED = _toolkit.PUMP_CLOSED

_toolkit.PUMP_OPEN_swigconstant(_toolkit)
PUMP_OPEN = _toolkit.PUMP_OPEN

_toolkit.PUMP_XFLOW_swigconstant(_toolkit)
PUMP_XFLOW = _toolkit.PUMP_XFLOW

_toolkit.NONE_swigconstant(_toolkit)
NONE = _toolkit.NONE

_toolkit.CHEM_swigconstant(_toolkit)
CHEM = _toolkit.CHEM

_toolkit.AGE_swigconstant(_toolkit)
AGE = _toolkit.AGE

_toolkit.TRACE_swigconstant(_toolkit)
TRACE = _toolkit.TRACE

_toolkit.CONCEN_swigconstant(_toolkit)
CONCEN = _toolkit.CONCEN

_toolkit.MASS_swigconstant(_toolkit)
MASS = _toolkit.MASS

_toolkit.SETPOINT_swigconstant(_toolkit)
SETPOINT = _toolkit.SETPOINT

_toolkit.FLOWPACED_swigconstant(_toolkit)
FLOWPACED = _toolkit.FLOWPACED

_toolkit.HW_swigconstant(_toolkit)
HW = _toolkit.HW

_toolkit.DW_swigconstant(_toolkit)
DW = _toolkit.DW

_toolkit.CM_swigconstant(_toolkit)
CM = _toolkit.CM

_toolkit.CFS_swigconstant(_toolkit)
CFS = _toolkit.CFS

_toolkit.GPM_swigconstant(_toolkit)
GPM = _toolkit.GPM

_toolkit.MGD_swigconstant(_toolkit)
MGD = _toolkit.MGD

_toolkit.IMGD_swigconstant(_toolkit)
IMGD = _toolkit.IMGD

_toolkit.AFD_swigconstant(_toolkit)
AFD = _toolkit.AFD

_toolkit.LPS_swigconstant(_toolkit)
LPS = _toolkit.LPS

_toolkit.LPM_swigconstant(_toolkit)
LPM = _toolkit.LPM

_toolkit.MLD_swigconstant(_toolkit)
MLD = _toolkit.MLD

_toolkit.CMH_swigconstant(_toolkit)
CMH = _toolkit.CMH

_toolkit.CMD_swigconstant(_toolkit)
CMD = _toolkit.CMD

_toolkit.DDA_swigconstant(_toolkit)
DDA = _toolkit.DDA

_toolkit.PDA_swigconstant(_toolkit)
PDA = _toolkit.PDA

_toolkit.TRIALS_swigconstant(_toolkit)
TRIALS = _toolkit.TRIALS

_toolkit.ACCURACY_swigconstant(_toolkit)
ACCURACY = _toolkit.ACCURACY

_toolkit.TOLERANCE_swigconstant(_toolkit)
TOLERANCE = _toolkit.TOLERANCE

_toolkit.EMITEXPON_swigconstant(_toolkit)
EMITEXPON = _toolkit.EMITEXPON

_toolkit.DEMANDMULT_swigconstant(_toolkit)
DEMANDMULT = _toolkit.DEMANDMULT

_toolkit.HEADERROR_swigconstant(_toolkit)
HEADERROR = _toolkit.HEADERROR

_toolkit.FLOWCHANGE_swigconstant(_toolkit)
FLOWCHANGE = _toolkit.FLOWCHANGE

_toolkit.HEADLOSSFORM_swigconstant(_toolkit)
HEADLOSSFORM = _toolkit.HEADLOSSFORM

_toolkit.GLOBALEFFIC_swigconstant(_toolkit)
GLOBALEFFIC = _toolkit.GLOBALEFFIC

_toolkit.GLOBALPRICE_swigconstant(_toolkit)
GLOBALPRICE = _toolkit.GLOBALPRICE

_toolkit.GLOBALPATTERN_swigconstant(_toolkit)
GLOBALPATTERN = _toolkit.GLOBALPATTERN

_toolkit.DEMANDCHARGE_swigconstant(_toolkit)
DEMANDCHARGE = _toolkit.DEMANDCHARGE

_toolkit.SP_GRAVITY_swigconstant(_toolkit)
SP_GRAVITY = _toolkit.SP_GRAVITY

_toolkit.SP_VISCOS_swigconstant(_toolkit)
SP_VISCOS = _toolkit.SP_VISCOS

_toolkit.UNBALANCED_swigconstant(_toolkit)
UNBALANCED = _toolkit.UNBALANCED

_toolkit.CHECKFREQ_swigconstant(_toolkit)
CHECKFREQ = _toolkit.CHECKFREQ

_toolkit.MAXCHECK_swigconstant(_toolkit)
MAXCHECK = _toolkit.MAXCHECK

_toolkit.DAMPLIMIT_swigconstant(_toolkit)
DAMPLIMIT = _toolkit.DAMPLIMIT

_toolkit.SP_DIFFUS_swigconstant(_toolkit)
SP_DIFFUS = _toolkit.SP_DIFFUS

_toolkit.BULKORDER_swigconstant(_toolkit)
BULKORDER = _toolkit.BULKORDER

_toolkit.WALLORDER_swigconstant(_toolkit)
WALLORDER = _toolkit.WALLORDER

_toolkit.TANKORDER_swigconstant(_toolkit)
TANKORDER = _toolkit.TANKORDER

_toolkit.CONCENLIMIT_swigconstant(_toolkit)
CONCENLIMIT = _toolkit.CONCENLIMIT

_toolkit.LOWLEVEL_swigconstant(_toolkit)
LOWLEVEL = _toolkit.LOWLEVEL

_toolkit.HILEVEL_swigconstant(_toolkit)
HILEVEL = _toolkit.HILEVEL

_toolkit.TIMER_swigconstant(_toolkit)
TIMER = _toolkit.TIMER

_toolkit.TIMEOFDAY_swigconstant(_toolkit)
TIMEOFDAY = _toolkit.TIMEOFDAY

_toolkit.SERIES_swigconstant(_toolkit)
SERIES = _toolkit.SERIES

_toolkit.AVERAGE_swigconstant(_toolkit)
AVERAGE = _toolkit.AVERAGE

_toolkit.MINIMUM_swigconstant(_toolkit)
MINIMUM = _toolkit.MINIMUM

_toolkit.MAXIMUM_swigconstant(_toolkit)
MAXIMUM = _toolkit.MAXIMUM

_toolkit.RANGE_swigconstant(_toolkit)
RANGE = _toolkit.RANGE

_toolkit.MIX1_swigconstant(_toolkit)
MIX1 = _toolkit.MIX1

_toolkit.MIX2_swigconstant(_toolkit)
MIX2 = _toolkit.MIX2

_toolkit.FIFO_swigconstant(_toolkit)
FIFO = _toolkit.FIFO

_toolkit.LIFO_swigconstant(_toolkit)
LIFO = _toolkit.LIFO

_toolkit.NOSAVE_swigconstant(_toolkit)
NOSAVE = _toolkit.NOSAVE

_toolkit.SAVE_swigconstant(_toolkit)
SAVE = _toolkit.SAVE

_toolkit.INITFLOW_swigconstant(_toolkit)
INITFLOW = _toolkit.INITFLOW

_toolkit.SAVE_AND_INIT_swigconstant(_toolkit)
SAVE_AND_INIT = _toolkit.SAVE_AND_INIT

_toolkit.CONST_HP_swigconstant(_toolkit)
CONST_HP = _toolkit.CONST_HP

_toolkit.POWER_FUNC_swigconstant(_toolkit)
POWER_FUNC = _toolkit.POWER_FUNC

_toolkit.CUSTOM_swigconstant(_toolkit)
CUSTOM = _toolkit.CUSTOM

_toolkit.NOCURVE_swigconstant(_toolkit)
NOCURVE = _toolkit.NOCURVE

_toolkit.VOLUME_CURVE_swigconstant(_toolkit)
VOLUME_CURVE = _toolkit.VOLUME_CURVE

_toolkit.PUMP_CURVE_swigconstant(_toolkit)
PUMP_CURVE = _toolkit.PUMP_CURVE

_toolkit.EFFIC_CURVE_swigconstant(_toolkit)
EFFIC_CURVE = _toolkit.EFFIC_CURVE

_toolkit.HLOSS_CURVE_swigconstant(_toolkit)
HLOSS_CURVE = _toolkit.HLOSS_CURVE

_toolkit.GENERIC_CURVE_swigconstant(_toolkit)
GENERIC_CURVE = _toolkit.GENERIC_CURVE

_toolkit.UNCONDITIONAL_swigconstant(_toolkit)
UNCONDITIONAL = _toolkit.UNCONDITIONAL

_toolkit.CONDITIONAL_swigconstant(_toolkit)
CONDITIONAL = _toolkit.CONDITIONAL

_toolkit.NO_REPORT_swigconstant(_toolkit)
NO_REPORT = _toolkit.NO_REPORT

_toolkit.NORMAL_REPORT_swigconstant(_toolkit)
NORMAL_REPORT = _toolkit.NORMAL_REPORT

_toolkit.FULL_REPORT_swigconstant(_toolkit)
FULL_REPORT = _toolkit.FULL_REPORT

_toolkit.R_NODE_swigconstant(_toolkit)
R_NODE = _toolkit.R_NODE

_toolkit.R_LINK_swigconstant(_toolkit)
R_LINK = _toolkit.R_LINK

_toolkit.R_SYSTEM_swigconstant(_toolkit)
R_SYSTEM = _toolkit.R_SYSTEM

_toolkit.R_DEMAND_swigconstant(_toolkit)
R_DEMAND = _toolkit.R_DEMAND

_toolkit.R_HEAD_swigconstant(_toolkit)
R_HEAD = _toolkit.R_HEAD

_toolkit.R_GRADE_swigconstant(_toolkit)
R_GRADE = _toolkit.R_GRADE

_toolkit.R_LEVEL_swigconstant(_toolkit)
R_LEVEL = _toolkit.R_LEVEL

_toolkit.R_PRESSURE_swigconstant(_toolkit)
R_PRESSURE = _toolkit.R_PRESSURE

_toolkit.R_FLOW_swigconstant(_toolkit)
R_FLOW = _toolkit.R_FLOW

_toolkit.R_STATUS_swigconstant(_toolkit)
R_STATUS = _toolkit.R_STATUS

_toolkit.R_SETTING_swigconstant(_toolkit)
R_SETTING = _toolkit.R_SETTING

_toolkit.R_POWER_swigconstant(_toolkit)
R_POWER = _toolkit.R_POWER

_toolkit.R_TIME_swigconstant(_toolkit)
R_TIME = _toolkit.R_TIME

_toolkit.R_CLOCKTIME_swigconstant(_toolkit)
R_CLOCKTIME = _toolkit.R_CLOCKTIME

_toolkit.R_FILLTIME_swigconstant(_toolkit)
R_FILLTIME = _toolkit.R_FILLTIME

_toolkit.R_DRAINTIME_swigconstant(_toolkit)
R_DRAINTIME = _toolkit.R_DRAINTIME

_toolkit.R_EQ_swigconstant(_toolkit)
R_EQ = _toolkit.R_EQ

_toolkit.R_NE_swigconstant(_toolkit)
R_NE = _toolkit.R_NE

_toolkit.R_LE_swigconstant(_toolkit)
R_LE = _toolkit.R_LE

_toolkit.R_GE_swigconstant(_toolkit)
R_GE = _toolkit.R_GE

_toolkit.R_LT_swigconstant(_toolkit)
R_LT = _toolkit.R_LT

_toolkit.R_GT_swigconstant(_toolkit)
R_GT = _toolkit.R_GT

_toolkit.R_IS_swigconstant(_toolkit)
R_IS = _toolkit.R_IS

_toolkit.R_NOT_swigconstant(_toolkit)
R_NOT = _toolkit.R_NOT

_toolkit.R_BELOW_swigconstant(_toolkit)
R_BELOW = _toolkit.R_BELOW

_toolkit.R_ABOVE_swigconstant(_toolkit)
R_ABOVE = _toolkit.R_ABOVE

_toolkit.R_IS_OPEN_swigconstant(_toolkit)
R_IS_OPEN = _toolkit.R_IS_OPEN

_toolkit.R_IS_CLOSED_swigconstant(_toolkit)
R_IS_CLOSED = _toolkit.R_IS_CLOSED

_toolkit.R_IS_ACTIVE_swigconstant(_toolkit)
R_IS_ACTIVE = _toolkit.R_IS_ACTIVE

_toolkit.MISSING_swigconstant(_toolkit)
MISSING = _toolkit.MISSING

def createproject():
    """createproject() -> int"""
    return _toolkit.createproject()

def deleteproject(ph):
    """
    deleteproject(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.deleteproject(ph)

def runproject(ph, inpFile, rptFile, outFile, pviewprog):
    """
    runproject(ph, inpFile, rptFile, outFile, pviewprog) -> int

    Parameters
    ----------
    ph: EN_Project
    inpFile: char const *
    rptFile: char const *
    outFile: char const *
    pviewprog: void (*)(char *)

    """
    return _toolkit.runproject(ph, inpFile, rptFile, outFile, pviewprog)

def init(ph, rptFile, outFile, unitsType, headLossType):
    """
    init(ph, rptFile, outFile, unitsType, headLossType) -> int

    Parameters
    ----------
    ph: EN_Project
    rptFile: char const *
    outFile: char const *
    unitsType: int
    headLossType: int

    """
    return _toolkit.init(ph, rptFile, outFile, unitsType, headLossType)

def open(ph, inpFile, rptFile, outFile):
    """
    open(ph, inpFile, rptFile, outFile) -> int

    Parameters
    ----------
    ph: EN_Project
    inpFile: char const *
    rptFile: char const *
    outFile: char const *

    """
    return _toolkit.open(ph, inpFile, rptFile, outFile)

def gettitle(ph):
    """
    gettitle(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.gettitle(ph)

def settitle(ph, line1, line2, line3):
    """
    settitle(ph, line1, line2, line3) -> int

    Parameters
    ----------
    ph: EN_Project
    line1: char *
    line2: char *
    line3: char *

    """
    return _toolkit.settitle(ph, line1, line2, line3)

def getcomment(ph, object, index):
    """
    getcomment(ph, object, index) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int
    index: int

    """
    return _toolkit.getcomment(ph, object, index)

def setcomment(ph, object, index, comment):
    """
    setcomment(ph, object, index, comment) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int
    index: int
    comment: char *

    """
    return _toolkit.setcomment(ph, object, index, comment)

def getcount(ph, object):
    """
    getcount(ph, object) -> int

    Parameters
    ----------
    ph: EN_Project
    object: int

    """
    return _toolkit.getcount(ph, object)

def saveinpfile(ph, filename):
    """
    saveinpfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.saveinpfile(ph, filename)

def close(ph):
    """
    close(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.close(ph)

def solveH(ph):
    """
    solveH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.solveH(ph)

def usehydfile(ph, filename):
    """
    usehydfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.usehydfile(ph, filename)

def openH(ph):
    """
    openH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.openH(ph)

def initH(ph, initFlag):
    """
    initH(ph, initFlag) -> int

    Parameters
    ----------
    ph: EN_Project
    initFlag: int

    """
    return _toolkit.initH(ph, initFlag)

def runH(ph):
    """
    runH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.runH(ph)

def nextH(ph):
    """
    nextH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.nextH(ph)

def saveH(ph):
    """
    saveH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.saveH(ph)

def savehydfile(ph, filename):
    """
    savehydfile(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char const *

    """
    return _toolkit.savehydfile(ph, filename)

def closeH(ph):
    """
    closeH(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.closeH(ph)

def solveQ(ph):
    """
    solveQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.solveQ(ph)

def openQ(ph):
    """
    openQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.openQ(ph)

def initQ(ph, saveFlag):
    """
    initQ(ph, saveFlag) -> int

    Parameters
    ----------
    ph: EN_Project
    saveFlag: int

    """
    return _toolkit.initQ(ph, saveFlag)

def runQ(ph):
    """
    runQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.runQ(ph)

def nextQ(ph):
    """
    nextQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.nextQ(ph)

def stepQ(ph):
    """
    stepQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.stepQ(ph)

def closeQ(ph):
    """
    closeQ(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.closeQ(ph)

def writeline(ph, line):
    """
    writeline(ph, line) -> int

    Parameters
    ----------
    ph: EN_Project
    line: char *

    """
    return _toolkit.writeline(ph, line)

def report(ph):
    """
    report(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.report(ph)

def copyreport(ph, filename):
    """
    copyreport(ph, filename) -> int

    Parameters
    ----------
    ph: EN_Project
    filename: char *

    """
    return _toolkit.copyreport(ph, filename)

def clearreport(ph):
    """
    clearreport(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.clearreport(ph)

def resetreport(ph):
    """
    resetreport(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.resetreport(ph)

def setreport(ph, format):
    """
    setreport(ph, format) -> int

    Parameters
    ----------
    ph: EN_Project
    format: char *

    """
    return _toolkit.setreport(ph, format)

def setstatusreport(ph, level):
    """
    setstatusreport(ph, level) -> int

    Parameters
    ----------
    ph: EN_Project
    level: int

    """
    return _toolkit.setstatusreport(ph, level)

def getversion():
    """getversion() -> int"""
    return _toolkit.getversion()

def geterror(errcode, maxLen):
    """
    geterror(errcode, maxLen) -> int

    Parameters
    ----------
    errcode: int
    maxLen: int

    """
    return _toolkit.geterror(errcode, maxLen)

def getstatistic(ph, type):
    """
    getstatistic(ph, type) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int

    """
    return _toolkit.getstatistic(ph, type)

def getresultindex(ph, type, index, value):
    """
    getresultindex(ph, type, index, value) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    index: int
    value: int *

    """
    return _toolkit.getresultindex(ph, type, index, value)

def getoption(ph, option):
    """
    getoption(ph, option) -> int

    Parameters
    ----------
    ph: EN_Project
    option: int

    """
    return _toolkit.getoption(ph, option)

def setoption(ph, option, value):
    """
    setoption(ph, option, value) -> int

    Parameters
    ----------
    ph: EN_Project
    option: int
    value: double

    """
    return _toolkit.setoption(ph, option, value)

def getflowunits(ph):
    """
    getflowunits(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getflowunits(ph)

def setflowunits(ph, units):
    """
    setflowunits(ph, units) -> int

    Parameters
    ----------
    ph: EN_Project
    units: int

    """
    return _toolkit.setflowunits(ph, units)

def gettimeparam(ph, param):
    """
    gettimeparam(ph, param) -> int

    Parameters
    ----------
    ph: EN_Project
    param: int

    """
    return _toolkit.gettimeparam(ph, param)

def settimeparam(ph, param, value):
    """
    settimeparam(ph, param, value) -> int

    Parameters
    ----------
    ph: EN_Project
    param: int
    value: long

    """
    return _toolkit.settimeparam(ph, param, value)

def getqualinfo(ph):
    """
    getqualinfo(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getqualinfo(ph)

def getqualtype(ph):
    """
    getqualtype(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getqualtype(ph)

def setqualtype(ph, qualType, chemName, chemUnits, traceNode):
    """
    setqualtype(ph, qualType, chemName, chemUnits, traceNode) -> int

    Parameters
    ----------
    ph: EN_Project
    qualType: int
    chemName: char *
    chemUnits: char *
    traceNode: char *

    """
    return _toolkit.setqualtype(ph, qualType, chemName, chemUnits, traceNode)

def addnode(ph, id, nodeType):
    """
    addnode(ph, id, nodeType) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *
    nodeType: int

    """
    return _toolkit.addnode(ph, id, nodeType)

def deletenode(ph, index, actionCode):
    """
    deletenode(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    actionCode: int

    """
    return _toolkit.deletenode(ph, index, actionCode)

def getnodeindex(ph, id):
    """
    getnodeindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getnodeindex(ph, id)

def getnodeid(ph, index):
    """
    getnodeid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getnodeid(ph, index)

def setnodeid(ph, index, newid):
    """
    setnodeid(ph, index, newid) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    newid: char *

    """
    return _toolkit.setnodeid(ph, index, newid)

def getnodetype(ph, index):
    """
    getnodetype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getnodetype(ph, index)

def getnodevalue(ph, index, property):
    """
    getnodevalue(ph, index, property) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int

    """
    return _toolkit.getnodevalue(ph, index, property)

def setnodevalue(ph, index, property, value):
    """
    setnodevalue(ph, index, property, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int
    value: double

    """
    return _toolkit.setnodevalue(ph, index, property, value)

def setjuncdata(ph, index, elev, dmnd, dmndpat):
    """
    setjuncdata(ph, index, elev, dmnd, dmndpat) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    elev: double
    dmnd: double
    dmndpat: char *

    """
    return _toolkit.setjuncdata(ph, index, elev, dmnd, dmndpat)

def settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve):
    """
    settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    elev: double
    initlvl: double
    minlvl: double
    maxlvl: double
    diam: double
    minvol: double
    volcurve: char *

    """
    return _toolkit.settankdata(ph, index, elev, initlvl, minlvl, maxlvl, diam, minvol, volcurve)

def getcoord(ph, index):
    """
    getcoord(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcoord(ph, index)

def setcoord(ph, index, x, y):
    """
    setcoord(ph, index, x, y) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    x: double
    y: double

    """
    return _toolkit.setcoord(ph, index, x, y)

def getdemandmodel(ph):
    """
    getdemandmodel(ph) -> int

    Parameters
    ----------
    ph: EN_Project

    """
    return _toolkit.getdemandmodel(ph)

def setdemandmodel(ph, type, pmin, preq, pexp):
    """
    setdemandmodel(ph, type, pmin, preq, pexp) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    pmin: double
    preq: double
    pexp: double

    """
    return _toolkit.setdemandmodel(ph, type, pmin, preq, pexp)

def adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName):
    """
    adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    baseDemand: double
    demandPattern: char *
    demandName: char *

    """
    return _toolkit.adddemand(ph, nodeIndex, baseDemand, demandPattern, demandName)

def deletedemand(ph, nodeIndex, demandIndex):
    """
    deletedemand(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.deletedemand(ph, nodeIndex, demandIndex)

def getdemandindex(ph, nodeIndex, demandName):
    """
    getdemandindex(ph, nodeIndex, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandName: char *

    """
    return _toolkit.getdemandindex(ph, nodeIndex, demandName)

def getnumdemands(ph, nodeIndex):
    """
    getnumdemands(ph, nodeIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int

    """
    return _toolkit.getnumdemands(ph, nodeIndex)

def getbasedemand(ph, nodeIndex, demandIndex):
    """
    getbasedemand(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getbasedemand(ph, nodeIndex, demandIndex)

def setbasedemand(ph, nodeIndex, demandIndex, baseDemand):
    """
    setbasedemand(ph, nodeIndex, demandIndex, baseDemand) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int
    baseDemand: double

    """
    return _toolkit.setbasedemand(ph, nodeIndex, demandIndex, baseDemand)

def getdemandpattern(ph, nodeIndex, demandIndex):
    """
    getdemandpattern(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getdemandpattern(ph, nodeIndex, demandIndex)

def setdemandpattern(ph, nodeIndex, demandIndex, patIndex):
    """
    setdemandpattern(ph, nodeIndex, demandIndex, patIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int
    patIndex: int

    """
    return _toolkit.setdemandpattern(ph, nodeIndex, demandIndex, patIndex)

def getdemandname(ph, nodeIndex, demandIndex):
    """
    getdemandname(ph, nodeIndex, demandIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIndex: int

    """
    return _toolkit.getdemandname(ph, nodeIndex, demandIndex)

def setdemandname(ph, nodeIndex, demandIdx, demandName):
    """
    setdemandname(ph, nodeIndex, demandIdx, demandName) -> int

    Parameters
    ----------
    ph: EN_Project
    nodeIndex: int
    demandIdx: int
    demandName: char *

    """
    return _toolkit.setdemandname(ph, nodeIndex, demandIdx, demandName)

def addlink(ph, id, linkType, fromNode, toNode):
    """
    addlink(ph, id, linkType, fromNode, toNode) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *
    linkType: int
    fromNode: char *
    toNode: char *

    """
    return _toolkit.addlink(ph, id, linkType, fromNode, toNode)

def deletelink(ph, index, actionCode):
    """
    deletelink(ph, index, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    actionCode: int

    """
    return _toolkit.deletelink(ph, index, actionCode)

def getlinkindex(ph, id):
    """
    getlinkindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getlinkindex(ph, id)

def getlinkid(ph, index):
    """
    getlinkid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinkid(ph, index)

def setlinkid(ph, index, newid):
    """
    setlinkid(ph, index, newid) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    newid: char *

    """
    return _toolkit.setlinkid(ph, index, newid)

def getlinktype(ph, index):
    """
    getlinktype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinktype(ph, index)

def setlinktype(ph, inout_index, linkType, actionCode):
    """
    setlinktype(ph, inout_index, linkType, actionCode) -> int

    Parameters
    ----------
    ph: EN_Project
    inout_index: int *
    linkType: int
    actionCode: int

    """
    return _toolkit.setlinktype(ph, inout_index, linkType, actionCode)

def getlinknodes(ph, index):
    """
    getlinknodes(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getlinknodes(ph, index)

def setlinknodes(ph, index, node1, node2):
    """
    setlinknodes(ph, index, node1, node2) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    node1: int
    node2: int

    """
    return _toolkit.setlinknodes(ph, index, node1, node2)

def getlinkvalue(ph, index, property):
    """
    getlinkvalue(ph, index, property) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int

    """
    return _toolkit.getlinkvalue(ph, index, property)

def setlinkvalue(ph, index, property, value):
    """
    setlinkvalue(ph, index, property, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    property: int
    value: double

    """
    return _toolkit.setlinkvalue(ph, index, property, value)

def setpipedata(ph, index, length, diam, rough, mloss):
    """
    setpipedata(ph, index, length, diam, rough, mloss) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    length: double
    diam: double
    rough: double
    mloss: double

    """
    return _toolkit.setpipedata(ph, index, length, diam, rough, mloss)

def getvertexcount(ph, index):
    """
    getvertexcount(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getvertexcount(ph, index)

def getvertex(ph, index, vertex):
    """
    getvertex(ph, index, vertex) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    vertex: int

    """
    return _toolkit.getvertex(ph, index, vertex)

def setvertices(ph, index, count):
    """
    setvertices(ph, index, count) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    count: int

    """
    return _toolkit.setvertices(ph, index, count)

def getpumptype(ph, linkIndex):
    """
    getpumptype(ph, linkIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int

    """
    return _toolkit.getpumptype(ph, linkIndex)

def getheadcurveindex(ph, linkIndex):
    """
    getheadcurveindex(ph, linkIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int

    """
    return _toolkit.getheadcurveindex(ph, linkIndex)

def setheadcurveindex(ph, linkIndex, curveIndex):
    """
    setheadcurveindex(ph, linkIndex, curveIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    linkIndex: int
    curveIndex: int

    """
    return _toolkit.setheadcurveindex(ph, linkIndex, curveIndex)

def addpattern(ph, id):
    """
    addpattern(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.addpattern(ph, id)

def deletepattern(ph, index):
    """
    deletepattern(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletepattern(ph, index)

def getpatternindex(ph, id):
    """
    getpatternindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getpatternindex(ph, id)

def getpatternid(ph, index):
    """
    getpatternid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getpatternid(ph, index)

def setpatternid(ph, index, id):
    """
    setpatternid(ph, index, id) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    id: char *

    """
    return _toolkit.setpatternid(ph, index, id)

def getpatternlen(ph, index):
    """
    getpatternlen(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getpatternlen(ph, index)

def getpatternvalue(ph, index, period):
    """
    getpatternvalue(ph, index, period) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    period: int

    """
    return _toolkit.getpatternvalue(ph, index, period)

def setpatternvalue(ph, index, period, value):
    """
    setpatternvalue(ph, index, period, value) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    period: int
    value: double

    """
    return _toolkit.setpatternvalue(ph, index, period, value)

def getaveragepatternvalue(ph, index):
    """
    getaveragepatternvalue(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getaveragepatternvalue(ph, index)

def setpattern(ph, index, values, len):
    """
    setpattern(ph, index, values, len) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    values: double *
    len: int

    """
    return _toolkit.setpattern(ph, index, values, len)

def addcurve(ph, id):
    """
    addcurve(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.addcurve(ph, id)

def deletecurve(ph, index):
    """
    deletecurve(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletecurve(ph, index)

def getcurveindex(ph, id):
    """
    getcurveindex(ph, id) -> int

    Parameters
    ----------
    ph: EN_Project
    id: char *

    """
    return _toolkit.getcurveindex(ph, id)

def getcurveid(ph, index):
    """
    getcurveid(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurveid(ph, index)

def setcurveid(ph, index, id):
    """
    setcurveid(ph, index, id) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    id: char *

    """
    return _toolkit.setcurveid(ph, index, id)

def getcurvelen(ph, index):
    """
    getcurvelen(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurvelen(ph, index)

def getcurvetype(ph, index):
    """
    getcurvetype(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcurvetype(ph, index)

def getcurvevalue(ph, curveIndex, pointIndex):
    """
    getcurvevalue(ph, curveIndex, pointIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    curveIndex: int
    pointIndex: int

    """
    return _toolkit.getcurvevalue(ph, curveIndex, pointIndex)

def setcurvevalue(ph, curveIndex, pointIndex, x, y):
    """
    setcurvevalue(ph, curveIndex, pointIndex, x, y) -> int

    Parameters
    ----------
    ph: EN_Project
    curveIndex: int
    pointIndex: int
    x: double
    y: double

    """
    return _toolkit.setcurvevalue(ph, curveIndex, pointIndex, x, y)

def getcurve(ph, index, xValues, yValues):
    """
    getcurve(ph, index, xValues, yValues) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    xValues: double *
    yValues: double *

    """
    return _toolkit.getcurve(ph, index, xValues, yValues)

def setcurve(ph, index, xValues, yValues, nPoints):
    """
    setcurve(ph, index, xValues, yValues, nPoints) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    xValues: double *
    yValues: double *
    nPoints: int

    """
    return _toolkit.setcurve(ph, index, xValues, yValues, nPoints)

def addcontrol(ph, type, linkIndex, setting, nodeIndex, level):
    """
    addcontrol(ph, type, linkIndex, setting, nodeIndex, level) -> int

    Parameters
    ----------
    ph: EN_Project
    type: int
    linkIndex: int
    setting: double
    nodeIndex: int
    level: double

    """
    return _toolkit.addcontrol(ph, type, linkIndex, setting, nodeIndex, level)

def deletecontrol(ph, index):
    """
    deletecontrol(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deletecontrol(ph, index)

def getcontrol(ph, index):
    """
    getcontrol(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getcontrol(ph, index)

def setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level):
    """
    setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    type: int
    linkIndex: int
    setting: double
    nodeIndex: int
    level: double

    """
    return _toolkit.setcontrol(ph, index, type, linkIndex, setting, nodeIndex, level)

def addrule(ph, rule):
    """
    addrule(ph, rule) -> int

    Parameters
    ----------
    ph: EN_Project
    rule: char *

    """
    return _toolkit.addrule(ph, rule)

def deleterule(ph, index):
    """
    deleterule(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.deleterule(ph, index)

def getrule(ph, index):
    """
    getrule(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getrule(ph, index)

def getruleID(ph, index):
    """
    getruleID(ph, index) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int

    """
    return _toolkit.getruleID(ph, index)

def getpremise(ph, ruleIndex, premiseIndex):
    """
    getpremise(ph, ruleIndex, premiseIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int

    """
    return _toolkit.getpremise(ph, ruleIndex, premiseIndex)

def setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value):
    """
    setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    logop: int
    object: int
    objIndex: int
    variable: int
    relop: int
    status: int
    value: double

    """
    return _toolkit.setpremise(ph, ruleIndex, premiseIndex, logop, object, objIndex, variable, relop, status, value)

def setpremiseindex(ph, ruleIndex, premiseIndex, objIndex):
    """
    setpremiseindex(ph, ruleIndex, premiseIndex, objIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    objIndex: int

    """
    return _toolkit.setpremiseindex(ph, ruleIndex, premiseIndex, objIndex)

def setpremisestatus(ph, ruleIndex, premiseIndex, status):
    """
    setpremisestatus(ph, ruleIndex, premiseIndex, status) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    status: int

    """
    return _toolkit.setpremisestatus(ph, ruleIndex, premiseIndex, status)

def setpremisevalue(ph, ruleIndex, premiseIndex, value):
    """
    setpremisevalue(ph, ruleIndex, premiseIndex, value) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    premiseIndex: int
    value: double

    """
    return _toolkit.setpremisevalue(ph, ruleIndex, premiseIndex, value)

def getthenaction(ph, ruleIndex, actionIndex):
    """
    getthenaction(ph, ruleIndex, actionIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int

    """
    return _toolkit.getthenaction(ph, ruleIndex, actionIndex)

def setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting):
    """
    setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.setthenaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def getelseaction(ph, ruleIndex, actionIndex):
    """
    getelseaction(ph, ruleIndex, actionIndex) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int

    """
    return _toolkit.getelseaction(ph, ruleIndex, actionIndex)

def setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting):
    """
    setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting) -> int

    Parameters
    ----------
    ph: EN_Project
    ruleIndex: int
    actionIndex: int
    linkIndex: int
    status: int
    setting: double

    """
    return _toolkit.setelseaction(ph, ruleIndex, actionIndex, linkIndex, status, setting)

def setrulepriority(ph, index, priority):
    """
    setrulepriority(ph, index, priority) -> int

    Parameters
    ----------
    ph: EN_Project
    index: int
    priority: double

    """
    return _toolkit.setrulepriority(ph, index, priority)
# This file is compatible with both classic and new-style classes.


